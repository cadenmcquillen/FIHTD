data <- load("Simulated_metabolomics_data_preprocessed.Rdata")
View(dat)
View(annotations)
BiocManager::install("safe")
BiocManager::install("safe")
a
exit
รง
รง
BiocManager::install("safe")
library(tidyverse)
library(safe)
BiocManager::install("safe")
library(tidyverse)
library(safe)
install.packages("DBI")
install.packages("DBI")
BiocManager::install("safe")
library(tidyverse)
library(safe)
data <- load("geod33272.rda")
num_kegg_pathways <- length(kegg)
print(paste0("The total number of pathways: ", num_kegg_pathways))
TCA_cycle_genes <- kegg$`hsa00020 Citrate cycle (TCA cycle)`
num_TCA_cycle_genes <- length(TCA_cycle_genes)
print(paste0("The total number of genes in TCA cycle pathway: " , num_TCA_cycle_genes))
#create Gene by Pathway matrix (Genes are columns, Pathway are rows)
Genes_Pathway_Matrix <- matrix(nrow = length(kegg), ncol = length(geod33272$ID$entrezID))
colnames(Genes_Pathway_Matrix) <- geod33272$ID$entrezID
rownames(Genes_Pathway_Matrix) <- names(kegg)
for (i in 1:length(kegg)){
currentPathway <- unlist(kegg[i])
genes <- geod33272$ID$entrezID  %in%  currentPathway
Genes_Pathway_Matrix[i,]  <- genes
}
#log2 gene expression matrix
gene_expression_matrix <- log2(geod33272$x)
rownames(gene_expression_matrix) <- geod33272$ID$entrezID
#activation status vector
activation_status <- geod33272$status
#Number of tests
num_tests<- length(gene_expression_matrix[,1])
#Target p value
p <- 0.05/num_tests
#Number of permutations needed for target p value
num_permutations <- 10*(1/p)
diff_exp <- safe(X.mat = gene_expression_matrix, y.vec = activation_status, C.mat = t(Genes_Pathway_Matrix),  Pi.mat = num_permutations, error = "FWER.Bonf")
# top 10
top10 <- safe.toptable(diff_exp,number = 10, pretty = TRUE, description = FALSE)
safe_dat <- load("Safe.Rdata")
# top 10
top10 <- safe.toptable(diff_exp,number = 10, pretty = TRUE, description = FALSE)
print(top10)
View(diff_exp)
BiocManager::install("safe")
library(tidyverse)
library(safe)
data <- load("geod33272.rda")
num_kegg_pathways <- length(kegg)
print(paste0("The total number of pathways: ", num_kegg_pathways))
TCA_cycle_genes <- kegg$`hsa00020 Citrate cycle (TCA cycle)`
num_TCA_cycle_genes <- length(TCA_cycle_genes)
print(paste0("The total number of genes in TCA cycle pathway: " , num_TCA_cycle_genes))
data <- load("geod33272.rda")
num_kegg_pathways <- length(kegg)
print(paste0("The total number of pathways: ", num_kegg_pathways))
TCA_cycle_genes <- kegg$`hsa00020 Citrate cycle (TCA cycle)`
num_TCA_cycle_genes <- length(TCA_cycle_genes)
print(paste0("The total number of genes in TCA cycle pathway: " , num_TCA_cycle_genes))
# create Gene by Pathway matrix (Genes are columns, Pathway are rows)
Genes_Pathway_Matrix <- matrix(nrow = length(kegg), ncol = length(geod33272$ID$entrezID))
colnames(Genes_Pathway_Matrix) <- geod33272$ID$entrezID
rownames(Genes_Pathway_Matrix) <- names(kegg)
for (i in 1:length(kegg)){
currentPathway <- unlist(kegg[i])
genes <- geod33272$ID$entrezID  %in%  currentPathway
Genes_Pathway_Matrix[i,]  <- genes
}
safe_dat <- load("Safe.Rdata")
# top 10
top10 <- safe.toptable(diff_exp,number = 10, pretty = TRUE, description = FALSE)
print(top10)
# plot
safeplot(safe=diff_exp,  cat.name = "hsa03440 Homologous recombination")
# Takes forever to run safe, so just load the results instead of rerunning
save(gene_expression_matrix, activation_status, num_tests, p, num_permutations, diff_exp, top10, file = "Safe.Rdata")
# plot
safeplot(safe=diff_exp,  cat.name = "hsa03440 Homologous recombination")
# Takes forever to run safe, so just load the results instead of rerunning
save(gene_expression_matrix, activation_status, num_tests, p, num_permutations, diff_exp, top10, file = "Safe.Rdata")
View(kegg)
View(Genes_Pathway_Matrix)
View(Genes_Pathway_Matrix)
View(gene_expression_matrix)
View(geod33272)
# BiocManager::install("safe")
library(tidyverse)
library(safe)
library(ggplot2)
data <- load("geod33272.rda")
num_kegg_pathways <- length(kegg)
print(paste0("The total number of pathways: ", num_kegg_pathways))
TCA_cycle_genes <- kegg$`hsa00020 Citrate cycle (TCA cycle)`
num_TCA_cycle_genes <- length(TCA_cycle_genes)
print(paste0("The total number of genes in TCA cycle pathway: " , num_TCA_cycle_genes))
# create Gene by Pathway matrix (Genes are columns, Pathway are rows)
Genes_Pathway_Matrix <- matrix(nrow = length(kegg), ncol = length(geod33272$ID$entrezID))
colnames(Genes_Pathway_Matrix) <- geod33272$ID$entrezID
rownames(Genes_Pathway_Matrix) <- names(kegg)
for (i in 1:length(kegg)){
currentPathway <- unlist(kegg[i])
genes <- geod33272$ID$entrezID  %in%  currentPathway
Genes_Pathway_Matrix[i,]  <- genes
}
safe_dat <- load("Safe.Rdata")
# top 10
top10 <- safe.toptable(diff_exp,number = 10, pretty = TRUE, description = FALSE)
print(top10)
# plot
safeplot(safe=diff_exp,  cat.name = "hsa03440 Homologous recombination")
data2 <- load("Simulated_metabolomics_data_preprocessed.Rdata")
View(dat)
zdat <- scale(dat) # scale dat to have mean=0 and sd=1 for each column (metabolites)
unique_sub_pathways <- unique(annotations$Sub_pathway) # get all subpathways
df_sub <- data.frame(matrix(nrow=length(gender),ncol=length(unique_sub_pathways))) # create empty data frame for pathway representatives
colnames(df_sub) <- unique_sub_pathways # assign colnames as pathway names
expvars_sub <- c()
for (p in unique_sub_pathways) {
metab <- annotations[annotations$Sub_pathway==p,]$name # identify metabs that belong to pathway
use_zdat <- zdat[,metab] # get data of the metabs
pca <- prcomp(use_zdat) # perform pca
expvar <- (pca$sdev^2)/sum(pca$sdev^2)
expvars_sub <- c(expvars_sub, expvar[1])
df_sub[p] <- pca$x[,1] # add first pca coordinate as pathway representative to df
}
dim_sub <- dim(df_sub) # num samples, num variables
print(paste("The number of samples is",dim_sub[1],"and the number of variables is",dim_sub[2]))
expvars_df_sub <- data.frame(expvars_sub)
ggplot(expvars_df_sub,aes(expvars_sub)) + geom_histogram(bins=10)
print(paste("The average explained variance is",mean(expvars_sub)))
View(df_sub)
library(DESeq2)
library(ggplot2)
library(DESeq2)
library(ggplot2)
de_mat <- DESeqDataSetFromMatrix(countData = dat, colData = data.frame(gender = factor(gender)))
de_mat <- DESeqDataSetFromMatrix(countData = df_sub, colData = data.frame(gender = factor(gender)))
data.frame(gender = factor(gender))
View(df_sub)
colData = data.frame(gender = factor(gender))
nrow(colData)
colData = data.frame(gender = factor(gender))
nrow(colData)
ncol(df_sub)
colData = data.frame(gender = factor(gender))
nrow(colData)
df_sub <- t(df_sub)
ncol(df_sub)
de_mat <- DESeqDataSetFromMatrix(countData = df_sub, colData = data.frame(gender = factor(gender)))
View(dat)
# BiocManager::install("safe")
library(tidyverse)
library(safe)
library(ggplot2)
data <- load("geod33272.rda")
num_kegg_pathways <- length(kegg)
print(paste0("The total number of pathways: ", num_kegg_pathways))
TCA_cycle_genes <- kegg$`hsa00020 Citrate cycle (TCA cycle)`
num_TCA_cycle_genes <- length(TCA_cycle_genes)
print(paste0("The total number of genes in TCA cycle pathway: " , num_TCA_cycle_genes))
# create Gene by Pathway matrix (Genes are columns, Pathway are rows)
Genes_Pathway_Matrix <- matrix(nrow = length(kegg), ncol = length(geod33272$ID$entrezID))
colnames(Genes_Pathway_Matrix) <- geod33272$ID$entrezID
rownames(Genes_Pathway_Matrix) <- names(kegg)
for (i in 1:length(kegg)){
currentPathway <- unlist(kegg[i])
genes <- geod33272$ID$entrezID  %in%  currentPathway
Genes_Pathway_Matrix[i,]  <- genes
}
safe_dat <- load("Safe.Rdata")
# top 10
top10 <- safe.toptable(diff_exp,number = 10, pretty = TRUE, description = FALSE)
print(top10)
# plot
safeplot(safe=diff_exp,  cat.name = "hsa03440 Homologous recombination")
data2 <- load("Simulated_metabolomics_data_preprocessed.Rdata")
zdat <- scale(dat) # scale dat to have mean=0 and sd=1 for each column (metabolites)
unique_sub_pathways <- unique(annotations$Sub_pathway) # get all subpathways
df_sub <- data.frame(matrix(nrow=length(gender),ncol=length(unique_sub_pathways))) # create empty data frame for pathway representatives
colnames(df_sub) <- unique_sub_pathways # assign colnames as pathway names
expvars_sub <- c()
for (p in unique_sub_pathways) {
metab <- annotations[annotations$Sub_pathway==p,]$name # identify metabs that belong to pathway
use_zdat <- zdat[,metab] # get data of the metabs
pca <- prcomp(use_zdat) # perform pca
expvar <- (pca$sdev^2)/sum(pca$sdev^2)
expvars_sub <- c(expvars_sub, expvar[1])
df_sub[p] <- pca$x[,1] # add first pca coordinate as pathway representative to df
}
dim_sub <- dim(df_sub) # num samples, num variables
print(paste("The number of samples is",dim_sub[1],"and the number of variables is",dim_sub[2]))
expvars_df_sub <- data.frame(expvars_sub)
ggplot(expvars_df_sub,aes(expvars_sub)) + geom_histogram(bins=10)
print(paste("The average explained variance is",mean(expvars_sub)))
unique_super_pathways <- unique(annotations$Super_pathway) # get all superpathways
df_super <- data.frame(matrix(nrow=length(gender),ncol=length(unique_super_pathways))) # create empty data frame for pathway representatives
colnames(df_super) <- unique_super_pathways # assign colnames as pathway names
expvars_super <- c()
for (p in unique_super_pathways) {
metab <- annotations[annotations$Super_pathway==p,]$name # identify metabs that belong to pathway
use_zdat <- zdat[,metab] # get data of the metabs
pca <- prcomp(use_zdat) # perform pca
expvar <- (pca$sdev^2)/sum(pca$sdev^2)
expvars_super <- c(expvars_super, expvar[1])
df_super[p] <- pca$x[,1] # add first pca coordinate as pathway representative to df
}
dim_super <- dim(df_super) # num samples, num variables
print(paste("The number of samples is",dim_super[1],"and the number of variables is",dim_super[2]))
expvars_df_super <- data.frame(expvars_super)
ggplot(expvars_df_super,aes(expvars_super)) + geom_histogram(bins=5)
print(paste("The average explained variance is",mean(expvars_super)))
library(limma)
design <- model.matrix(~gender, data=dat)
View(dat)
design <- model.matrix(~gender, data=data.frame(dat))
View(design)
library(limma)
data.frame(dat)
library(limma)
fit <- lmFit(dat, design)
library(limma)
dat <- data.frame(dat)
design <- model.matrix(~gender, data=dat)
fit <- lmFit(dat, design)
dat <- data.frame(dat)
design <- model.matrix(~gender, data=dat)
dim(design)
dim(dat)
fit <- lmFit(t(dat), design)
View(fit)
fit <- eBayes(fit)
View(fit)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
de_metabolites <- subset(results, abs(logFC) > 1 & adj.P.Val < 0.05)$ID
View(results)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$log2FoldChange, breaks = 50)
View(results)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$logFC, breaks = 50)
de_metabolites <- subset(results, abs(logFC) > 1 & adj.P.Val < 0.05)$ID
library(ReactomePA)
pathway_enrichment <- enrichPathway(de_metabolites, organism="Homo sapiens", pvalueCutoff=0.05, qvalueCutoff=0.1)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$logFC, breaks = 50)
de_metabolites <- subset(results, abs(logFC) > 0.5 & adj.P.Val < 0.05)$ID
design <- model.matrix(~gender, data=df_sub)
dim(design)
dim(dat)
fit <- lmFit(t(df_sub), design)
fit <- eBayes(fit)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$logFC, breaks = 50)
de_metabolites <- subset(results, abs(logFC) > 0.5 & adj.P.Val < 0.05)$ID
View(fit)
View(design)
design <- model.matrix(~gender, data=df_sub)
dim(design)
dim(df_sub)
design <- model.matrix(~gender, data=t(df_sub))
design <- model.matrix(~gender, data=data.frame(t(df_sub)))
dim(design)
dim(df_sub)
View(design)
fit <- lmFit(df_sub, design)
design <- model.matrix(~gender, data=df_sub)
dim(design)
dim(dat)
fit <- lmFit(df_sub, design)
fit <- lmFit(t(df_sub), design)
fit <- eBayes(fit)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$logFC, breaks = 50)
de_metabolites <- subset(results, abs(logFC) > 0.5 & adj.P.Val < 0.05)$ID
View(fit)
View(results)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
results
hist(results$logFC, breaks = 50)
de_metabolites <- subset(results, abs(logFC) > 1 & adj.P.Val < 0.05)$row.names
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
subset(results, abs(logFC) > 1 & adj.P.Val < 0.05)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
subset(results, abs(logFC) > 1 & adj.P.Val < 0.05)$row.names
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$logFC, breaks = 50)
de_metabolites <- rownames( subset(results, abs(logFC) > 1 & adj.P.Val < 0.05) )
design <- model.matrix(~gender, data=dat)
dim(design)
dim(dat)
fit <- lmFit(t(dat), design)
fit <- eBayes(fit)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$logFC, breaks = 50)
de_metabolites <- rownames( subset(results, abs(logFC) > 1 & adj.P.Val < 0.05) )
library(ReactomePA)
pathway_enrichment <- enrichPathway(de_metabolites, organism="Homo sapiens", pvalueCutoff=0.05, qvalueCutoff=0.1)
# BiocManager::install("safe")
library(tidyverse)
library(safe)
library(ggplot2)
data <- load("geod33272.rda")
num_kegg_pathways <- length(kegg)
print(paste0("The total number of pathways: ", num_kegg_pathways))
TCA_cycle_genes <- kegg$`hsa00020 Citrate cycle (TCA cycle)`
num_TCA_cycle_genes <- length(TCA_cycle_genes)
print(paste0("The total number of genes in TCA cycle pathway: " , num_TCA_cycle_genes))
# create Gene by Pathway matrix (Genes are columns, Pathway are rows)
Genes_Pathway_Matrix <- matrix(nrow = length(kegg), ncol = length(geod33272$ID$entrezID))
colnames(Genes_Pathway_Matrix) <- geod33272$ID$entrezID
rownames(Genes_Pathway_Matrix) <- names(kegg)
for (i in 1:length(kegg)){
currentPathway <- unlist(kegg[i])
genes <- geod33272$ID$entrezID  %in%  currentPathway
Genes_Pathway_Matrix[i,]  <- genes
}
safe_dat <- load("Safe.Rdata")
# top 10
top10 <- safe.toptable(diff_exp,number = 10, pretty = TRUE, description = FALSE)
print(top10)
# plot
safeplot(safe=diff_exp,  cat.name = "hsa03440 Homologous recombination")
data2 <- load("Simulated_metabolomics_data_preprocessed.Rdata")
zdat <- scale(dat) # scale dat to have mean=0 and sd=1 for each column (metabolites)
unique_sub_pathways <- unique(annotations$Sub_pathway) # get all subpathways
df_sub <- data.frame(matrix(nrow=length(gender),ncol=length(unique_sub_pathways))) # create empty data frame for pathway representatives
colnames(df_sub) <- unique_sub_pathways # assign colnames as pathway names
expvars_sub <- c()
for (p in unique_sub_pathways) {
metab <- annotations[annotations$Sub_pathway==p,]$name # identify metabs that belong to pathway
use_zdat <- zdat[,metab] # get data of the metabs
pca <- prcomp(use_zdat) # perform pca
expvar <- (pca$sdev^2)/sum(pca$sdev^2)
expvars_sub <- c(expvars_sub, expvar[1])
df_sub[p] <- pca$x[,1] # add first pca coordinate as pathway representative to df
}
dim_sub <- dim(df_sub) # num samples, num variables
print(paste("The number of samples is",dim_sub[1],"and the number of variables is",dim_sub[2]))
expvars_df_sub <- data.frame(expvars_sub)
ggplot(expvars_df_sub,aes(expvars_sub)) + geom_histogram(bins=10)
print(paste("The average explained variance is",mean(expvars_sub)))
unique_super_pathways <- unique(annotations$Super_pathway) # get all superpathways
df_super <- data.frame(matrix(nrow=length(gender),ncol=length(unique_super_pathways))) # create empty data frame for pathway representatives
colnames(df_super) <- unique_super_pathways # assign colnames as pathway names
expvars_super <- c()
for (p in unique_super_pathways) {
metab <- annotations[annotations$Super_pathway==p,]$name # identify metabs that belong to pathway
use_zdat <- zdat[,metab] # get data of the metabs
pca <- prcomp(use_zdat) # perform pca
expvar <- (pca$sdev^2)/sum(pca$sdev^2)
expvars_super <- c(expvars_super, expvar[1])
df_super[p] <- pca$x[,1] # add first pca coordinate as pathway representative to df
}
dim_super <- dim(df_super) # num samples, num variables
print(paste("The number of samples is",dim_super[1],"and the number of variables is",dim_super[2]))
expvars_df_super <- data.frame(expvars_super)
ggplot(expvars_df_super,aes(expvars_super)) + geom_histogram(bins=5)
print(paste("The average explained variance is",mean(expvars_super)))
library(limma)
design <- model.matrix(~gender, data=df_sub)
dim(design)
dim(dat)
fit <- lmFit(t(df_sub), design)
fit <- eBayes(fit)
results <- topTable(fit, coef=2, adjust.method="fdr", sort.by="P", number=Inf)
hist(results$logFC, breaks = 50)
de_pathway <- rownames( subset(results, abs(logFC) > 1 & adj.P.Val < 0.05) )
ggplot(results, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(color=ifelse(abs(logFC) > 1 & padj < 0.05, "red", "black")), size=1) +
theme_bw() +
scale_color_identity(guide="none") +
xlab("Log2 Fold Change") +
ylab("-Log10 Adjusted P-value") +
ggtitle("Volcano Plot of Differential Expression") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(results, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(color=ifelse(abs(logFC) > 1 & adj.P.Val < 0.05, "red", "black")), size=1) +
theme_bw() +
scale_color_identity(guide="none") +
xlab("Log2 Fold Change") +
ylab("-Log10 Adjusted P-value") +
ggtitle("Volcano Plot of Differential Expression") +
theme(plot.title = element_text(hjust = 0.5))
View(fit)
